- if @grid.action_names.include?('add') || @grid.action_names.include?('hotkey_add') 
  :ruby
    model_name = @grid.model.name.underscore
    columns = @grid.columns.dup.delete_if {|x| x.name.to_s == 'id' }
    datepicker_str = ''
    object = @grid.model.new
    remote_paths = []
  .create_form{:id => "#{@grid.name}_form", :title => "Create new #{model_name.titleize}"}
    = form_for object, :url => @grid.path do |form|
      - columns.each do |column|
        - if new_form_able?(column)
          :ruby
            column_name = get_column_name(column)
            label = column.options[:form_label] || column.label
          .field{:name => column_name}
            %label{:for => "#{model_name}_#{column_name}"}= label
            - if column.sql_type.to_s == 'belongs_to'
              - remote_paths << fetch_path(column)
              = form.select column_name,                            |
                select_options(column),                             |
                { include_blank: true },                            |
                :include_blank     => !column.presence_required?,   |
                :class             => 'chzn-select',                |
                :style             => "width:250px",                |
                :disabled          => column.options[:auto_fill],   |
                "data-remote-path" => fetch_path(column),           |
                "data-text-attr"   => column.option_text_attribute, |
                "data-target"      => "#{column_name}_target_flag", |
                "data-column"       => column.name                  |

            - elsif column.sql_type.to_s == 'has_and_belongs_to_many' or column.sql_type.to_s == 'has_many'
              - remote_paths << fetch_path(column)
              = form.select column.reflection.name.to_s,            |
                select_options(column),                             |
                { include_blank: true },                            |
                :include_blank     => !column.presence_required?,   |
                :multiple          => true,                         |
                :class             => 'chzn-select',                |
                :style             => "width:250px",                |
                "data-remote-path" => fetch_path(column),           |
                "data-text-attr"   => column.option_text_attribute, |
                "data-target"      => "#{column_name}_target_flag", |
                "data-column"      => column.name,                  |
                :disabled          => column.options[:auto_fill]    |

            - elsif column.options[:choices].present?
              - if column.options[:editor] == 'HasManyEditor'
                = form.select column_name,                            |
                  select_options(column),                             |
                  { include_blank: true },                            |
                  :include_blank     => !column.presence_required?,   |
                  :multiple          => true,                         |
                  :class             => 'chzn-select',                |
                  :style             => "width:250px",                |
                  "data-remote-path" => fetch_path(column),           |
                  "data-text-attr"   => column.option_text_attribute, |
                  "data-target"      => "#{column_name}_target_flag", |
                  "data-column"      => column.name,                  |
                  :disabled          => column.options[:auto_fill]    |
              - else
                - remote_paths << select_tag_fetch_path(column)
                = select_tag "#{model_name}[#{column_name}]",          |
                  select_tag_options(column),                          |
                  :style             => "width:250px",                 |
                  :class             => 'chzn-select',                 |
                  :disabled          => column.options[:auto_fill],    |
                  "data-target"      => "#{column_name}_target_flag",  |
                  "data-remote-path" => select_tag_fetch_path(column), |
                  "data-text-attr"   => column.option_text_attribute,  |
                  "data-column"      => column.name                    |
                - if column.options[:depend_column].present?
                  :javascript
                    $(function(){
                      var depend_select_id = "#{model_name}_#{column.options[:depend_column]}";
                      var depend_select = $("select#" + depend_select_id);

                      depend_select.live('change', function(){
                        var current_select_id = "#{model_name}_#{column_name}";
                        var current_select = $("select#" + current_select_id);
                        var key = $(this).val();
                        current_select.find("option").css('display','none').trigger("liszt:updated");
                        current_select.val("").trigger("liszt:updated");
                        current_select.find("option[data-key=" + key + "]").css('display','list-item').trigger("liszt:updated");
                      });
                    });
                  
            - elsif column.options[:file]
              = form.file_field column_name, "data-target" => "#{column_name}_target_flag", "data-column" => column.name, :style => 'width: 250px'
            - elsif column.options[:password]
              = form.password_field column_name, "data-target" => "#{column_name}_target_flag", "data-column" => column.name, :style => 'width: 250px'
            - else
              - if column.sql_type.to_s.downcase == 'boolean'
                = form.check_box column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-column" => column.name
              - else
                = form.text_field column_name, :style => 'width: 250px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-daterange' => daterange_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-column" => column.name
            .field_error
      .submit
        %input.btn.success{:id => "#{@grid.name}_submit", :name => "commit", :type => "submit", :value => " Create "}/
        %input.btn{:id => "#{@grid.name}_submit_continue", :name => "commit", :type => "submit", :value => " Create and Continue "}/
      = hidden_field_tag 'remote_paths', j(remote_paths.uniq.compact.join(','))

  :javascript
    window._jsonData = {};